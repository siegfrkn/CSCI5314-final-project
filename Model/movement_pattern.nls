;; Adapted in part by Katrina Siegfried from Flocking.nlogo by Uri Wilensky
;; 2022 04 30 for CSCI 5413

;; use optimal foraging theory + flocking
;; prarie dogs walk fairly randomly with lower flock cohesion unless one of the following happens
;; 1. return to burrow chirp - all prarie dogs return to burrow (for this would we need a TODO to add threat to initiate this?)
;; 2. found something chip - flock to the finder

;; TODO
;; gradient ascent/descent be able to move relative to food source (optimal foraging theory)
;; more effectively use burrow-affinity to increase amount of time spent at/close-to burrow, maybe be a nice-to-have
;; add cost function to barrier / patch type

;;; GLOBAL VARIABLES

globals [
    max-heading-turn
    max-attraction-turn
    max-repulsion-turn
    vision
    minimum-separation
]

;;; SETUP METHODS

to set-up-flocking
    set max-heading-turn 5.0
    set max-attraction-turn 3.0
    set max-repulsion-turn 1.5
    set vision 100
    set minimum-separation 1.0
end

;;; HELPER METHODS FROM FLOCKING MODEL

;; turn right by "turn" degrees (or left if "turn" is negative),
;; but never turn more than "max-turn" degrees
to turn-at-most [turn max-turn]  ;; turtle procedure
  ifelse abs turn > max-turn
    [ ifelse turn > 0
        [ rt max-turn ]
        [ lt max-turn ] ]
    [ rt turn ]
end

to turn-towards [new-heading max-turn]
  turn-at-most (subtract-headings new-heading heading) max-turn
end

to turn-away [new-heading max-turn]
  turn-at-most (subtract-headings heading new-heading) max-turn
end

;;; FLOCK METHODS

to flock
      find-flockmates
      if any? flockmates
        [ find-nearest-neighbor
      let nn-dist 0
      if nearest-neighbor != nobody [set nn-dist distance nearest-neighbor]
          ifelse nn-dist < minimum-separation
            [ repulsion ]
            [ align
              attraction ] ]
end

to find-flockmates
  set flockmates other link-neighbors in-radius vision
end

to find-nearest-neighbor
  set nearest-neighbor min-one-of flockmates with [feature = "dog"] [distance myself]
end

;;; REPULSION METHODS

to repulsion
  if nearest-neighbor != nobody
  [turn-away ([heading] of nearest-neighbor) max-repulsion-turn]
end

;;; HEADING / ALIGN METHODS

to align
  turn-towards average-flockmate-heading max-heading-turn
end

to-report average-flockmate-heading
  ;; We can't just average the heading variables here.
  ;; For example, the average of 1 and 359 should be 0,
  ;; not 180.  So we have to use trigonometry.
  let x-component sum [dx] of flockmates
  let y-component sum [dy] of flockmates
  ifelse x-component = 0 and y-component = 0
    [ report heading ]
    [ report atan x-component y-component ]
end

;;; ATTRACTION METHODS

to attraction
  ifelse distance-from-burrow < burrow-limit * 0.5
  ;; we want to turn towards the group's average heading
  [turn-towards average-heading max-attraction-turn]
  ;; the farther we get from burrow the more we want to orient our heading towards it, scale it realtive to 180
  [turn-towards burrow-heading 180 * burrow-affinity / 100]
end

to-report distance-from-burrow
  let burrow-location one-of link-neighbors with [feature = "colony"]
  report distance burrow-location
end

to-report average-heading
  ;; "towards myself" gives us the heading from the other turtle
  ;; to me, but we want the heading from me to the other turtle,
  ;; so we add 180
  let x-component 0
  let y-component 0
    set x-component mean [sin (towards myself + 180)] of flockmates
    set y-component mean [cos (towards myself + 180)] of flockmates
  ifelse x-component = 0 and y-component = 0
    [ report heading ]
    [ report atan x-component y-component ]
end

to-report burrow-heading
  ;; "towards myself" gives us the heading from the other turtle
  ;; to me, but we want the heading from me to the other turtle,
  ;; so we add 180
  let x-component 0
  let y-component 0
  if feature = "colony"[
    set x-component sin (towards myself + 180)
    set y-component cos (towards myself + 180)]
  ifelse x-component = 0 and y-component = 0
    [ report heading ]
    [ report atan x-component y-component ]
end

;;; DIRECT MOVEMENT METHODS

to return-to-burrow
  set heading towards one-of link-neighbors with [feature = "colony"]
end

to check-bounce
    ;; bounce off left and right walls
    if abs pxcor = max-pxcor
    [ set heading (- heading) set return true ]
    ;; bounce off top and bottom walls
    if abs pycor = max-pycor
    [ set heading (180 - heading) set return true ]
    ;; check if turtles have all returned
  ask link-neighbors[
    if count turtles-here >= 0.8 * count link-neighbors and return = true
    [ set return false]]
end

to flock-to-neighbor
  ;; if this isn't the finder, cluster and face the finder
  if found-something = false
  [set minimum-separation 0
   face one-of link-neighbors with [found-something = true]]
end

to evaluate-found-something
  ;; if all the turtles are at the finder, reset
  ask link-neighbors[
    if count turtles-here + 1 >= 0.8 * count link-neighbors and found-something = true
    [ask one-of turtles with [found-something = true][
     ifelse gender = "female"
     [set color pink]
     [set color blue]
     if plague = true
     [set color red]
     set found-something false
     set minimum-separation 1.0]
  ]]
end